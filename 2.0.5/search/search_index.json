{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contributing/code/","title":"Code","text":""},{"location":"contributing/code/#pre-requisites","title":"Pre-requisites","text":"<p>You will need to have the following installed:</p> <ul> <li>Nix</li> <li>Direnv</li> </ul> <p>Important</p> <p>We use a Flake-based workflow. You can certainly develop for <code>treefmt</code> without Flakes and leverage much of what is listed below, but it is left up to the reader to determine how to make that work.</p>"},{"location":"contributing/code/#go-development","title":"Go development","text":"<p>The default devshell provides all the necessary tooling and utilities for working on <code>treefmt</code>.</p> nix/devshells/default.nix<pre><code>{\n  pkgs,\n  perSystem,\n  ...\n}:\npkgs.mkShellNoCC {\n  env.GOROOT = \"${pkgs.go}/share/go\";\n\n  packages =\n    (with pkgs; [\n      go\n      goreleaser\n      golangci-lint\n      delve\n      pprof\n      graphviz\n      cobra-cli\n      enumer\n      perSystem.gomod2nix.default\n    ])\n    ++ # include formatters for development and testing\n    (import ../packages/treefmt/formatters.nix pkgs);\n}\n</code></pre> <p>Direnv should load this by default when entering the root of the repository.</p> <p>For the most part, you should be able to develop normally as you would any other Go program.</p> <p>Important</p> <p>When you have completed making any changes and have tested it as you would any other Go program, it is important to ensure it works when run as a Nix package.</p> <p>This can be done with <code>nix run .# -- &lt;args&gt;</code>, which will build the Nix derivation and execute the resultant <code>treefmt</code> binary.</p>"},{"location":"contributing/code/#formatting","title":"Formatting","text":"<p>We use the latest released version of treefmt and treefmt-nix to format the repository by running <code>nix fmt</code> from the root directory.</p> nix/formatter.nix<pre><code>{\n  pkgs,\n  inputs,\n  ...\n}:\ninputs.treefmt-nix.lib.mkWrapper pkgs {\n  projectRootFile = \"flake.nix\";\n\n  programs = {\n    alejandra.enable = true;\n    deadnix.enable = true;\n    gofumpt.enable = true;\n    prettier.enable = true;\n    statix.enable = true;\n  };\n\n  settings = {\n    global.excludes = [\n      \"LICENSE\"\n      # let's not mess with the test folder\n      \"test/*\"\n      # unsupported extensions\n      \"*.{gif,png,svg,tape,mts,lock,mod,sum,toml,env,envrc,gitignore,pages}\"\n    ];\n\n    formatter = {\n      deadnix = {\n        priority = 1;\n      };\n\n      statix = {\n        priority = 2;\n      };\n\n      alejandra = {\n        priority = 3;\n      };\n\n      prettier = {\n        options = [\n          \"--tab-width\"\n          \"4\"\n        ];\n        includes = [\"*.{css,html,js,json,jsx,md,mdx,scss,ts,yaml}\"];\n      };\n    };\n  };\n}\n</code></pre>"},{"location":"contributing/code/#checks","title":"Checks","text":"<p>Running <code>nix flake check</code> will build all the devshells and Nix packages, as well as check the formatting with treefmt and any other Flake checks that have been configured.</p>"},{"location":"contributing/code/#documentation","title":"Documentation","text":"<p>When making changes, it is important to add or update any relevant sections in the documentation within the same pull request.</p> <p>For more information see the next section.</p>"},{"location":"contributing/docs/","title":"Documentation","text":"<p>There is a separate devshell called <code>docs</code> which is provided for working with the docs locally.</p> <p>It can be entered by running: <code>nix develop .#docs</code></p> nix/devshells/docs.nix<pre><code>{\n  pkgs,\n  perSystem,\n  ...\n}:\npkgs.mkShellNoCC {\n  packages = with pkgs;\n    (with pkgs.python3Packages; [\n      mike\n      mkdocs\n      mkdocs-material\n      mkdocs-awesome-pages-plugin\n    ])\n    ++ [\n      (pkgs.writeShellApplication {\n        name = \"vhs\";\n        runtimeInputs =\n          [\n            perSystem.self.treefmt\n            pkgs.rsync\n            pkgs.vhs\n          ]\n          ++ (import ../packages/treefmt/formatters.nix pkgs);\n        text = ''vhs \"$@\"'';\n      })\n    ];\n}\n</code></pre> <p>The docs are based on MkDocs and the MkDocs Material theme. You will find its configuration and content in the following locations:</p> <ul> <li><code>mkdocs.yaml</code></li> <li><code>./docs</code></li> </ul>"},{"location":"contributing/docs/#serve-locally","title":"Serve locally","text":"<p>To serve the docs locally run <code>mkdocs serve</code> from the root of the repository:</p> <pre><code>\u276f mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\nWARNING -  The following pages exist in the docs directory, but are not included in the \"nav\" configuration:\n             - index.md\nINFO    -  Documentation built in 0.26 seconds\nINFO    -  [16:22:36] Watching paths for changes: 'docs/content', 'mkdocs.yml'\nINFO    -  [16:22:36] Serving on http://127.0.0.1:8000/treefmt/\n</code></pre>"},{"location":"contributing/docs/#versioning-publication","title":"Versioning &amp; Publication","text":"<p>Versioning of the docs is managed through mike.</p> <p>It is responsible for managing the structure of the <code>gh-pages</code> branch in the repository, which Github Pages is configured to serve from.</p> <p>Note</p> <p>More information about versioning with MkDocs Material and mike can be found here.</p> <p>There is a github workflow, <code>.github/workflows/gh-pages.yml</code> which is responsible for publishing the docs. It does the following:</p> <ul> <li>On merge to <code>main</code>, the docs version main is updated.</li> <li>When a new tag is created of the form <code>v.&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> a docs version <code>v&lt;major&gt;.&lt;minor&gt;</code> is created and the     latest alias is updated to point to this.</li> </ul> <p>The idea is that users will land on the latest released version of the docs by default, with <code>main</code> being available if they wish to read about unreleased features and changes.</p> <p>To preview the versions locally you can use <code>mike serve</code> instead of <code>mkdocs serve</code>.</p> <p>Warning</p> <p>Be sure to have fetched the latest changes for the <code>gh-pages</code> branch first. This is especially important if you are using <code>mike</code> locally to make manual changes to the published site.</p>"},{"location":"getting-started/configure/","title":"Configure","text":"<p>The <code>treefmt.toml</code> configuration file consists of a mixture of global options and formatter sections:</p> <pre><code>[global]\nexcludes = [\"*.md\", \"*.dat\"]\n\n[formatter.elm]\ncommand = \"elm-format\"\noptions = [\"--yes\"]\nincludes = [\"*.elm\"]\n\n[formatter.go]\ncommand = \"gofmt\"\noptions = [\"-w\"]\nincludes = [\"*.go\"]\n\n[formatter.python]\ncommand = \"black\"\nincludes = [\"*.py\"]\n\n# use the priority field to control the order of execution\n\n# run shellcheck first\n[formatter.shellcheck]\ncommand = \"shellcheck\"\nincludes = [\"*.sh\"]\npriority = 0    # default is 0, but we set it here for clarity\n\n# shfmt second\n[formatter.shfmt]\ncommand = \"shfmt\"\noptions = [\"-s\", \"-w\"]\nincludes = [\"*.sh\"]\npriority = 1\n</code></pre>"},{"location":"getting-started/configure/#global-options","title":"Global Options","text":"<ul> <li><code>excludes</code> - an optional list of glob patterns used to exclude certain files from all formatters.</li> </ul>"},{"location":"getting-started/configure/#formatter-options","title":"Formatter Options","text":"<ul> <li><code>command</code> - the command to invoke when applying the formatter.</li> <li><code>options</code> - an optional list of args to be passed to <code>command</code>.</li> <li><code>includes</code> - a list of glob patterns used to determine whether the formatter should be applied against a given path.</li> <li><code>excludes</code> - an optional list of glob patterns used to exclude certain files from this formatter.</li> <li><code>priority</code> - influences the order of execution. Greater precedence is given to lower numbers, with the default being <code>0</code>.</li> </ul>"},{"location":"getting-started/configure/#same-file-multiple-formatters","title":"Same file, multiple formatters?","text":"<p>For each file, <code>treefmt</code> determines a list of formatters based on the configured <code>includes</code> / <code>excludes</code> rules. This list is then sorted, first by priority (lower the value, higher the precedence) and secondly by formatter name (lexicographically).</p> <p>The resultant sequence of formatters is used to create a batch key, and similarly matched files get added to that batch until it is full, at which point the files are passed to each formatter in turn.</p> <p>This means that <code>treefmt</code> guarantees only one formatter will be operating on a given file at any point in time. Another consequence is that formatting is deterministic for a given file and a given <code>treefmt</code> configuration.</p> <p>By setting the priority fields appropriately, you can control the order in which those formatters are applied for any files they both happen to match on.</p>"},{"location":"getting-started/configure/#glob-patterns-format","title":"Glob patterns format","text":"<p>This is a variant of the Unix glob pattern. It supports all the usual selectors such as <code>*</code> and <code>?</code>.</p>"},{"location":"getting-started/configure/#examples","title":"Examples","text":"<ul> <li><code>*.go</code> - match all files in the project that end with a \".go\" file extension.</li> <li><code>vendor/*</code> - match all files under the vendor folder, recursively.</li> </ul>"},{"location":"getting-started/configure/#supported-formatters","title":"Supported Formatters","text":"<p>Any formatter that follows the spec is supported out of the box.</p> <p>Already 60+ formatters are supported.</p> <p>To find examples, take a look at https://github.com/numtide/treefmt-nix/tree/main/examples.</p> <p>If you are a Nix user, you might also like https://github.com/numtide/treefmt-nix, which uses Nix to pull in the right formatter package and seamlessly integrates both together.</p>"},{"location":"getting-started/install/","title":"Install","text":"<p>There are two ways to install <code>treefmt</code>:</p> <ol> <li>Download the latest binary</li> <li>Compile and build from source.</li> </ol>"},{"location":"getting-started/install/#download-a-binary-file","title":"Download a binary file","text":"<p>You can download the latest <code>treefmt</code> binaries here.</p>"},{"location":"getting-started/install/#build-from-source","title":"Build from source","text":"<p>There are several ways to build <code>treefmt</code> from source. Your choice will depend on whether you're a nix user or not.</p>"},{"location":"getting-started/install/#non-nix-user","title":"Non-Nix User","text":"<p>To try the project without building it, run the following from the project root folder:</p> <pre><code>$ go run main.go --help\n</code></pre> <p>This command will output the manual. You can run the tool in this manner with any other flag or option to format your project.</p> <p>To build a binary, you need to have <code>go 1.22</code> installed. You can find instructions on how to install a <code>go</code> compiler here.</p> <p>To build the project, run the following:</p> <pre><code>$ go build\n</code></pre> <p>After the build command exits successfully, you will find the <code>treefmt</code> binary in the project root folder.</p>"},{"location":"getting-started/install/#nix-user","title":"Nix User","text":"<p>If you're using both <code>treefmt</code> and <code>nix</code>, you can make use of <code>treefmt-nix</code>, a wrapper that makes installing and configuring <code>treefmt</code> with <code>nix</code> easier.</p> <p>Non-flake user</p> <p>Here you also have two options: you can install <code>treefmt</code> with plain <code>nix-build</code>, or with <code>nix-shell</code>.</p> <p>To build the package with <code>nix-build</code>, run the following:</p> <pre><code>$ nix-build -A packages.x86_64-linux.treefmt\n</code></pre> <p>note: substitute <code>x86_64-linux</code> for the target system you with to build for</p> <p>Nix-flake user</p> <p>If you want to use this repository with flakes, first ensure you have flakes enabled. You can then execute the following command in the project root folder:</p> <pre><code>$ nix run . -- --help\n</code></pre> <p>To build the project, run the following command in the project root folder:</p> <pre><code>$ nix build\n</code></pre> <p>The <code>treefmt</code> binary will be available in the <code>result</code> folder.</p>"},{"location":"getting-started/usage/","title":"Usage","text":"<p><code>treefmt</code> has the following specification:</p> <pre><code>Usage: treefmt [&lt;paths&gt; ...] [flags]\n\nArguments:\n  [&lt;paths&gt; ...]    Paths to format. Defaults to formatting the whole tree.\n\nFlags:\n  -h, --help                         Show context-sensitive help.\n      --allow-missing-formatter      Do not exit with error if a configured formatter is missing.\n  -C, --working-directory=\".\"        Run as if treefmt was started in the specified working directory instead of the current working directory.\n      --no-cache                     Ignore the evaluation cache entirely. Useful for CI.\n  -c, --clear-cache                  Reset the evaluation cache. Use in case the cache is not precise enough.\n      --config-file=STRING           Load the config file from the given path (defaults to searching upwards for treefmt.toml).\n      --fail-on-change               Exit with error if any changes were made. Useful for CI.\n  -f, --formatters=FORMATTERS,...    Specify formatters to apply. Defaults to all formatters.\n      --tree-root=STRING             The root directory from which treefmt will start walking the filesystem (defaults to the directory containing the config file) ($PRJ_ROOT).\n      --tree-root-file=STRING        File to search for to find the project root (if --tree-root is not passed).\n      --walk=\"auto\"                  The method used to traverse the files within --tree-root. Currently supports 'auto', 'git' or 'filesystem'.\n  -v, --verbose                      Set the verbosity of logs e.g. -vv ($LOG_LEVEL).\n  -V, --version                      Print version.\n  -i, --init                         Create a new treefmt.toml.\n  -u, --on-unmatched=warn            Log paths that did not match any formatters at the specified log level, with fatal exiting the process with an error. Possible values are\n                                     &lt;debug|info|warn|error|fatal&gt;.\n      --stdin                        Format the context passed in via stdin.\n      --cpu-profile=STRING           The file into which a cpu profile will be written.\n      --ci                           Runs treefmt in a CI mode, enabling --no-cache, --fail-on-change and adjusting some other settings best suited to a CI use case.\n</code></pre>"},{"location":"getting-started/usage/#arguments","title":"Arguments","text":""},{"location":"getting-started/usage/#paths","title":"<code>[&lt;paths&gt; ...]</code>","text":"<p>Paths to format. Defaults to formatting the whole tree</p>"},{"location":"getting-started/usage/#flags","title":"Flags","text":""},{"location":"getting-started/usage/#-h-help","title":"<code>-h, --help</code>","text":"<p>Prints available flags and options</p>"},{"location":"getting-started/usage/#-allow-missing-formatter","title":"<code>--allow-missing-formatter</code>","text":"<p>Do not exit with an error if some of the configured formatters are missing.</p>"},{"location":"getting-started/usage/#-c-working-directory","title":"<code>-C, --working-directory=\".\"</code>","text":"<p>Run as if <code>treefmt</code> was started in the specified working directory instead of the current working directory</p>"},{"location":"getting-started/usage/#-no-cache","title":"<code>--no-cache</code>","text":"<p>Tells <code>treefmt</code> to ignore the evaluation cache entirely.</p> <p>With this flag, you can avoid cache invalidation issues, if any. Typically, the machine that is running <code>treefmt</code> in CI is starting with a fresh environment each time, so any calculated cache is lost.</p> <p>The <code>--no-cache</code> flag eliminates unnecessary work in CI.</p>"},{"location":"getting-started/usage/#-config-file-config-file","title":"<code>--config-file &lt;config-file&gt;</code>","text":"<p>Run with the specified config file.</p>"},{"location":"getting-started/usage/#-fail-on-change","title":"<code>--fail-on-change</code>","text":"<p>Exit with error if any changes were made.</p> <p>This is useful for CI if you want to detect if someone forgot to format their code.</p>"},{"location":"getting-started/usage/#-f-formatters-formatters","title":"<code>-f, --formatters &lt;formatters&gt;...</code>","text":"<p>Specify formatters to apply. Defaults to all formatters.</p>"},{"location":"getting-started/usage/#-tree-root","title":"<code>--tree-root=\".\"</code>","text":"<p>The root directory from which <code>treefmt</code> will start walking the filesystem.</p>"},{"location":"getting-started/usage/#-walk-autogitfilesystem","title":"<code>--walk &lt;auto|git|filesystem&gt;</code>","text":"<p>The method used to traverse the files within <code>--tree-root</code>. Currently supports <code>auto</code>, <code>git</code> or <code>filesystem</code>.</p> <p>Default is <code>auto</code>, where we will detect if the <code>&lt;tree-root&gt;</code> is a git repository and use the <code>git</code> walker for traversal. If not we will fall back to the <code>filesystem</code> walker.</p>"},{"location":"getting-started/usage/#-v-verbose","title":"<code>-v, --verbose</code>","text":"<p>Set the verbosity of logs e.g. <code>-vv</code>. Can also be set with an integer value in an env variable <code>$LOG_LEVEL</code>.</p> <p>Log verbosity is based off the number of 'v' used. With one <code>-v</code>, your logs will display <code>[INFO]</code> and <code>[ERROR]</code> messages, while <code>-vv</code> will also show <code>[DEBUG]</code> messages.</p>"},{"location":"getting-started/usage/#-init","title":"<code>--init</code>","text":"<p>Create a new <code>treefmt.toml</code>.</p>"},{"location":"getting-started/usage/#-u-on-unmatched","title":"<code>-u --on-unmatched</code>","text":"<p>Log paths that did not match any formatters at the specified log level, with fatal exiting the process with an error. Possible values are . <p>[default: warn]</p>"},{"location":"getting-started/usage/#-stdin","title":"<code>--stdin</code>","text":"<p>Format the context passed in via stdin.</p>"},{"location":"getting-started/usage/#-cpu-profile","title":"<code>--cpu-profile</code>","text":"<p>The file into which a cpu profile will be written.</p>"},{"location":"getting-started/usage/#-ci","title":"<code>--ci</code>","text":"<p>Runs treefmt in a CI mode which does the following:</p> <ul> <li>ensures <code>INFO</code> level logging at a minimum</li> <li>enables <code>--no-cache</code> and <code>--fail-on-change</code></li> <li>introduces a small startup delay so we do not start processing until the second after the process started, thereby     ensuring the accuracy of our change detection based on second-level <code>modtime</code>.</li> </ul>"},{"location":"getting-started/usage/#-v-version","title":"<code>-V, --version</code>","text":"<p>Print version.</p>"},{"location":"getting-started/usage/#ci-integration","title":"CI integration","text":"<p>Typically, you would use <code>treefmt</code> in CI with the <code>--ci</code> flag.</p> <p>You can configure a <code>treefmt</code> job in a GitHub pipeline for Ubuntu with <code>nix-shell</code> like this:</p> <pre><code>name: treefmt\non:\n    pull_request:\n    push:\n        branches: main\njobs:\n    formatter:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v4\n            - uses: cachix/install-nix-action@v26\n              with:\n                  nix_path: nixpkgs=channel:nixos-unstable\n            - uses: cachix/cachix-action@v14\n              with:\n                  name: nix-community\n                  authToken: \"${{ secrets.CACHIX_AUTH_TOKEN }}\"\n            - name: treefmt\n              run: nix-shell -p treefmt --run \"treefmt --ci\"\n</code></pre>"},{"location":"reference/formatter-spec/","title":"Formatter Specification","text":"<p>In order to keep the design of <code>treefmt</code> simple, we only supports formatters that adhere to a certain standard. This document outlines that standard.</p> <p>If the formatter you would like to use doesn't comply with the rules, it's often possible to create a wrapper script that transforms the usage to match the specification.</p> <p>In this design, we rely on <code>treefmt</code> to do the tree traversal, and only invoke the code formatter on the selected files.</p>"},{"location":"reference/formatter-spec/#rules","title":"Rules","text":"<p>In order for the formatter to comply to this spec, it MUST comply with the following:</p>"},{"location":"reference/formatter-spec/#1-files-passed-as-arguments","title":"1. Files passed as arguments","text":"<p>In order to be integrated with <code>treefmt</code>'s workflow, the formatter's CLI must be of the form:</p> <pre><code>&lt;command&gt; [options] [...&lt;files&gt;]\n</code></pre> <p>Where:</p> <ul> <li><code>&lt;command&gt;</code> is the name of the formatting tool.</li> <li><code>[options]</code> is any number of flags and options that the formatter accepts.</li> <li><code>[...&lt;files&gt;]</code> is one or more files given to the formatter for processing.</li> </ul> <p>Example:</p> <pre><code>$ rustfmt --edition 2018 src/main.rs src/lib.rs\n</code></pre> <p>[!IMPORTANT] It MUST process the specified files. For example, it MUST NOT ignore files because they are not tracked by a VCS.</p> <p>It SHOULD processes only the specified files. Files that are not passed SHOULD never be formatted.</p>"},{"location":"reference/formatter-spec/#2-write-to-changed-files","title":"2. Write to changed files","text":"<p>Whenever there is a change to the code formatting, the code formatter MUST write to the changes back to the original location.</p> <p>If there is no changes to the original file, the formatter MUST NOT write to the original location.</p>"},{"location":"reference/formatter-spec/#3-idempotent","title":"3. Idempotent","text":"<p>The code formatter SHOULD be indempotent. Meaning that it produces stable outputs.</p>"},{"location":"reference/formatter-spec/#4-reliable","title":"4. Reliable","text":"<p>We expect the formatter to be reliable and not break the semantics of the formatted files.</p>"}]}